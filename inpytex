#!/usr/bin/env python
from __future__ import with_statement

import sys
import re
import logging
from doctest import script_from_examples
from md5 import md5

log = logging.getLogger('inpytex')

BEGIN_SNIPPET_RE = re.compile('^\s*%%%\s+inpytex\s*(.*)$')
BEGIN_AUTOGENERATED_RE = re.compile('^\s*%%%\s+AUTOGENERATED')
END_SNIPPET_RE = re.compile('^(\s*)(%%%\s+end)\s*(\w*)')
COMMENT_RE = re.compile('[^%]*%')

def execute_snippet(snippet, indent):
    text = '\n'.join(COMMENT_RE.sub('', line, 1) for line in snippet)
    script = script_from_examples(text)
    output = [indent + '%%% AUTOGENERATED, DO NOT EDIT UNTIL "%%% end"']
    def emit(s): output.append(indent + str(s))
    exec script in dict(emit=emit)
    return output
    
def checksum_autogen(lines):
    text = ' '.join(line.strip() for line in lines)
    return md5(text).hexdigest()    

def usage(error=None):
    if error is not None:
        logging.error(error)

    print 'Usage: %s <file.tex>' % sys.argv[0]
    print 'NOTE: <file.tex> gets overwritten with the pre-processed output'
    
    sys.exit(1)

def main(argv):
    logging.basicConfig(level=logging.INFO)
    
    if len(argv) != 2:
        usage()
    
    filename = argv[1]

    in_snippet = False
    in_autogen = False
    output = []

    try:
        f = open(filename, 'rb')
    except Exception:
        usage('Error opening %s' % filename)        
    
    with f:
        for idx, line in enumerate(f):
            
            line = line.strip('\n')

            begin_match = BEGIN_SNIPPET_RE.match(line)
            if begin_match:
                if in_snippet:
                    raise Exception('Unexpected begin')
                in_snippet = True
                snippet = []
                output.append(line)

                comment = begin_match.group(1)
                if comment: comment = '"%s"' % comment
                
                log.info('Found python snippet at line %s %s', idx, comment)

            elif BEGIN_AUTOGENERATED_RE.match(line):
                if not in_snippet:
                    raise Exception('Unexpected autogenerated code')
                in_snippet = False
                in_autogen = True
                autogen = [line]

            else:
                end_match = END_SNIPPET_RE.match(line)
                if end_match:
                    end_line = line
                    indent = end_match.group(1)
                    try:
                        if not in_snippet and not in_autogen:
                            raise Exception('Unexpected end')

                        if in_autogen:
                            checksum = checksum_autogen(autogen[1:])
                            read_checksum = end_match.group(3)
                            if read_checksum and checksum != read_checksum:
                                log.info("Autogenerated code edited! Not overwriting. To overwrite delete the checksum.")
                                output += autogen
                                continue

                        log.debug('Executing snippet...')
                        out_snippet = execute_snippet(snippet, indent)
                        checksum = checksum_autogen(out_snippet[1:])
                        output += out_snippet
                        end_line = '%s%s %s' % (indent, end_match.group(2), checksum)
                    finally:
                        in_snippet = False
                        in_autogen = False
                        output.append(end_line)

                else:
                    if not in_autogen:
                        output.append(line)                    
                    if in_snippet:
                        snippet.append(line)
                    if in_autogen:
                        autogen.append(line)
    
    if in_snippet or in_autogen:
        raise Exception('Unexpected EOF')
    
    log.debug('Writing file...')
    with open(filename, 'wb') as f:
        print >> f, '\n'.join(output)

if __name__ == '__main__':
    main(sys.argv)
