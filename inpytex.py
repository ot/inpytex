#!/usr/bin/env python
from __future__ import with_statement

import sys
import re
from doctest import script_from_examples
from md5 import md5

BEGIN_SNIPPET_RE = re.compile('^\s*%%%\s+inpytex')
BEGIN_AUTOGENERATED_RE = re.compile('^\s*%%%\s+AUTOGENERATED')
END_SNIPPET_RE = re.compile('^\s*%%%\s+end')

COMMENT_RE = re.compile('[^%]*%')

def execute_snippet(snippet):
    text = '\n'.join(COMMENT_RE.sub('', line, 1) for line in snippet)
    script = script_from_examples(text)
    output = ['%%% AUTOGENERATED, DO NOT EDIT BELOW THIS LINE UNTIL "end"']
    def emit(s): output.append(str(s))
    exec script in dict(emit=emit)
    return output
    
def main(argv):
    
    filename = argv[1]
    
    with open(filename) as f:
        lines = [line.strip('\n') for line in f]

    in_snippet = False
    in_autogen = False
    updates = []
    
    for idx, line in enumerate(lines):
        if BEGIN_SNIPPET_RE.match(line):
            if in_snippet:
                raise Exception('Unexpected begin')
            in_snippet = True
            snippet = []
        elif BEGIN_AUTOGENERATED_RE.match(line):
            in_snippet = False
            in_autogen = True
            begin_autogen = idx
        elif END_SNIPPET_RE.match(line):
            if not in_snippet and not in_autogen:
                raise Exception('Unexpected end')
            end_autogen = idx
            if not in_autogen:
                begin_autogen = idx
            in_snippet = False
            in_autogen = False
            
            updates.append((begin_autogen, end_autogen, execute_snippet(snippet)))
        else:
            if in_snippet:
                snippet.append(line)
    
    if in_snippet:
        raise Exception('Unexpected EOF')
    
    for update in reversed(updates): # Apply changes backwards to preserve line numbers
        begin_autogen, end_autogen, out = update
        lines[begin_autogen:end_autogen] = out

    with open(filename, 'w') as f:
        print >> f, '\n'.join(lines)

if __name__ == '__main__':
    main(sys.argv)
