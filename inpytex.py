#!/usr/bin/env python
from __future__ import with_statement

import sys
import re
import logging
from doctest import script_from_examples
from md5 import md5

log = logging.getLogger('inpytex')

BEGIN_SNIPPET_RE = re.compile('^\s*%%%\s+inpytex')
BEGIN_AUTOGENERATED_RE = re.compile('^\s*%%%\s+AUTOGENERATED')

END_SNIPPET_RE = re.compile('(^\s*%%%\s+end)\s*(\w*)')

COMMENT_RE = re.compile('[^%]*%')

def execute_snippet(snippet):
    text = '\n'.join(COMMENT_RE.sub('', line, 1) for line in snippet)
    script = script_from_examples(text)
    output = ['%%% AUTOGENERATED, DO NOT EDIT BELOW THIS LINE UNTIL "end"']
    def emit(s): output.append(str(s))
    exec script in dict(emit=emit)
    return output
    
def checksum_autogen(lines):
    text = ' '.join(line.strip() for line in lines)
    return md5(text).hexdigest()    

def main(argv):
    
    logging.basicConfig(level=logging.INFO)
        
    filename = argv[1]
    
    with open(filename) as f:
        lines = [line.strip('\n') for line in f]

    in_snippet = False
    in_autogen = False
    updates = []
    
    for idx, line in enumerate(lines):
        if BEGIN_SNIPPET_RE.match(line):
            if in_snippet:
                raise Exception('Unexpected begin')
            in_snippet = True
            snippet = []
        elif BEGIN_AUTOGENERATED_RE.match(line):
            in_snippet = False
            in_autogen = True
            begin_autogen = idx
        else:
            
            end_match = END_SNIPPET_RE.match(line)
            if end_match:
                try:
                    if not in_snippet and not in_autogen:
                        raise Exception('Unexpected end')
                    end_autogen = idx
                    if not in_autogen:
                        begin_autogen = idx
                    else:
                        checksum = checksum_autogen(lines[begin_autogen:end_autogen])
                        read_checksum = end_match.group(2)
                        if read_checksum and checksum != read_checksum:
                            log.info("Autogenerated code at line %s edited! Not overwriting", begin_autogen)
                            continue

                    out_snippet = execute_snippet(snippet)
                    checksum = checksum_autogen(out_snippet)
                    updates.append((begin_autogen, end_autogen, out_snippet))
                    lines[idx] = '%s %s' % (end_match.group(1), checksum)
                finally:
                    in_snippet = False
                    in_autogen = False

            else:
                if in_snippet:
                    snippet.append(line)
    
    if in_snippet or in_autogen:
        raise Exception('Unexpected EOF')
    
    for update in reversed(updates): # Apply changes backwards to preserve line numbers
        begin_autogen, end_autogen, out = update
        lines[begin_autogen:end_autogen] = out

    with open(filename, 'w') as f:
        print >> f, '\n'.join(lines)

if __name__ == '__main__':
    main(sys.argv)
